out <- list(samples = tmp)
return(out)
}
# init_function <- function(data){
#   list(
#     z = apply(data$Y, 1, function(x) ifelse(sum(x) == 0, 0, 1)),
#     alpha = rnorm(2),
#     beta = rnorm(1),
#     rho = runif(1, .1, 3),
#     sigma = abs(rnorm(1, 0, sd = 2)),
#     mu0 = 0
#   )
# }
detach("package:nimble", unload = TRUE)
# fit <- fit_spom(
#   constants = list(
#     pocc = data$pocc,
#     pdet = data$pdet,
#     nsites = data$nsites,
#     nvisits = data$nvisits,
#     rho_upr = max(dist)/2
#   ),
#   data = list(
#     Y = data$Y,
#     x = data$X[,2],
#     W = data$W,
#     dist = data$dist,
#     ones = rep(1, nrow(data$X))
#   ),
#   inits = init_function(data),
#   niter = 25000,
#   thin = 10,
#   nchains = 3
# )
# saveRDS(fit, "rds files/spom/spom_fit_slice.rds")
# parallel
start <- Sys.time()
this_cluster <- makeCluster(3)
chain_output <- parLapply(
cl = this_cluster,
X = 1:3,
fun = fit_spom,
constants = list(
pocc = data$pocc,
pdet = data$pdet,
nsites = data$nsites,
nvisits = data$nvisits,
rho_upr = max(dist)/2
),
data = list(
Y = data$Y,
x = data$X[,2],
W = data$W,
dist = data$dist,
ones = rep(1, nrow(data$X))
),
niter = 50000,
thin = 10,
nchains = 1,
parallel = TRUE
)
stopCluster(this_cluster)
end <- Sys.time()
end - start
saveRDS(chain_output, file = "rds files/spom/spom_nox.rds")
# load samples
# fit <- readRDS("rds files/spom/spom_default.rds")
fit <- readRDS("rds files/spom/spom_nox.rds")
fit <- list(samples = list(chain1 = fit[[1]][[1]], chain2 = fit[[2]][[1]], chain3 = fit[[3]][[1]]))
# traceplots
par(mfrow = c(3, 2))
for(i in 1:ncol(fit$samples[[1]])){
plot(
1, type = "n",
ylim = range(sapply(fit$samples, function(x) range(x[,i]))),
xlim = c(1, nrow(fit$samples[[1]])),
ylab = "estimate",
xlab = "iteration",
main = colnames(fit$samples[[1]])[i]
)
for(chain in 1:length(fit$samples)){
lines(fit$samples[[chain]][,i], col = chain)
}
}
data <- readRDS("rds files/spom/spom_data.rds")
fit_spom <- function(seed, parallel = F, constants, data, inits, niter = 5000, nchains = 3, thin = 1){
# for parallel
suppressMessages(library(nimble))
dexpcov <- nimbleFunction(
run = function(dists = double(2), rho = double(0), sigma = double(0)) {
returnType(double(2))
n <- dim(dists)[1]
result <- matrix(nrow = n, ncol = n, init = FALSE)
sigma2 <- sigma*sigma
rho2 <- rho * rho
for(i in 1:n)
for(j in 1:n)
result[i, j] <- sigma2 * exp((-1/2) * (1/rho2) * dists[i,j] * dists[i,j])
return(result)
}
)
assign("dexpcov", dexpcov, envir = .GlobalEnv)
# inits
init_function <- function(data){
list(
z = apply(data$Y, 1, function(x) ifelse(sum(x) == 0, 0, 1)),
alpha = rnorm(2),
# beta = rnorm(1),
rho = 2,
sigma = 1.5,
mu0 = 0
)
}
# code
code <- nimbleCode({
# regression coefficients
# for(i in 1:(pocc-1)){
#   beta[i] ~ dnorm(0, sd = 2)
# }
for(i in 1:pdet){
alpha[i] ~ dnorm(0, sd = 2)
}
# spatial parameters
mu0 ~ dnorm(0, sd = 2)
rho ~ dunif(.1, rho_upr)
sigma ~ T(dnorm(0, sd = 2), 0, Inf)
# spatial mean
covmat[1:nsites, 1:nsites] <- dexpcov(
dists = dist[1:nsites, 1:nsites],
rho = rho,
sigma = sigma
)
mu[1:nsites] <- mu0 * ones[1:nsites]
eta[1:nsites] ~ dmnorm(mu[1:nsites], cov = covmat[1:nsites, 1:nsites])
# likelihood
for(site in 1:nsites){
# logit(psi[site]) <- beta[1] * x[site] + eta[site]
logit(psi[site]) <- eta[site]
z[site] ~ dbern(psi[site])
for(visit in 1:nvisits){
logit(p[site, visit]) <- alpha[1] + alpha[2] * W[site, visit, 2]
Y[site, visit] ~ dbern(z[site] * p[site, visit])
}
}
})
# R model
if(parallel){
inits <- init_function(data)
}
model <- nimbleModel(code, constants, data, inits)
# C model
model_c <- compileNimble(model)
# R mcmc
# monitors <- c("beta", "alpha", "sigma", "rho", "mu0")
monitors <- c("alpha", "sigma", "rho", "mu0")
model_conf <- configureMCMC(model, monitors = monitors)
# customize MCMC
# model_conf$removeSampler(c("rho", "sigma"))
# model_conf$addSampler(
#   target = c("rho", "sigma"),
#   type = "RW_block",
#   control = list(
#     scale = .05
#   )
# )
##use AFSS? https://r-nimble.org/better-block-sampling-in-mcmc-with-the-automated-factor-slice-sampler
# model_conf$removeSamplers(c("rho", "sigma"))
# model_conf$addSampler(
#   target = c("rho", "sigma"),
#   type = "AF_slice",
#   control = list(
#     sliceAdaptFactorInterval = 200,
#     sliceWidths = c(2, 2)
#   )
# )
# model_conf$removeSamplers(c("eta[1:96]"))
# model_conf$addSampler(
#   target = "eta[1:196]",
#   type = "RW_block",
#   control = list(
#     scale = .10
#   )
# )
# model_conf$addSampler(
#   target = c("rho", "sigma"),
#   type = "AF_slice",
# )
mcmc <- buildMCMC(model_conf)
# C mcmc
mcmc_c <- compileNimble(mcmc)
# run
if(!parallel){
tmp <- runMCMC(mcmc_c, niter = niter, nchains = nchains, thin = thin)
} else{
tmp <- runMCMC(mcmc_c, niter = niter, nchains = nchains, thin = thin, setSeed = seed)
}
# return
out <- list(samples = tmp)
return(out)
}
# init_function <- function(data){
#   list(
#     z = apply(data$Y, 1, function(x) ifelse(sum(x) == 0, 0, 1)),
#     alpha = rnorm(2),
#     beta = rnorm(1),
#     rho = runif(1, .1, 3),
#     sigma = abs(rnorm(1, 0, sd = 2)),
#     mu0 = 0
#   )
# }
detach("package:nimble", unload = TRUE)
# fit <- fit_spom(
#   constants = list(
#     pocc = data$pocc,
#     pdet = data$pdet,
#     nsites = data$nsites,
#     nvisits = data$nvisits,
#     rho_upr = max(dist)/2
#   ),
#   data = list(
#     Y = data$Y,
#     x = data$X[,2],
#     W = data$W,
#     dist = data$dist,
#     ones = rep(1, nrow(data$X))
#   ),
#   inits = init_function(data),
#   niter = 25000,
#   thin = 10,
#   nchains = 3
# )
# saveRDS(fit, "rds files/spom/spom_fit_slice.rds")
# parallel
start <- Sys.time()
this_cluster <- makeCluster(3)
chain_output <- parLapply(
cl = this_cluster,
X = 1:3,
fun = fit_spom,
constants = list(
pocc = data$pocc,
pdet = data$pdet,
nsites = data$nsites,
nvisits = data$nvisits,
rho_upr = max(dist)/2
),
data = list(
Y = data$Y,
x = data$X[,2],
W = data$W,
dist = data$dist,
ones = rep(1, nrow(data$X))
),
niter = 50000,
thin = 10,
nchains = 1,
parallel = TRUE
)
stopCluster(this_cluster)
end <- Sys.time()
end - start
saveRDS(chain_output, file = "rds files/spom/spom_default.rds")
# load samples
fit <- readRDS("rds files/spom/spom_default.rds")
fit <- list(samples = list(chain1 = fit[[1]][[1]], chain2 = fit[[2]][[1]], chain3 = fit[[3]][[1]]))
# traceplots
par(mfrow = c(3, 2))
for(i in 1:ncol(fit$samples[[1]])){
plot(
1, type = "n",
ylim = range(sapply(fit$samples, function(x) range(x[,i]))),
xlim = c(1, nrow(fit$samples[[1]])),
ylab = "estimate",
xlab = "iteration",
main = colnames(fit$samples[[1]])[i]
)
for(chain in 1:length(fit$samples)){
lines(fit$samples[[chain]][,i], col = chain)
}
}
# fit$samples <- fit$samples[5001:10000,]
# plot_tbl <- tibble(
#   parameter = factor(colnames(fit$samples), levels = colnames(fit$samples)),
#   mean = colMeans(fit$samples),
#   lwr = apply(fit$samples, 2, quantile, 0.025),
#   upr = apply(fit$samples, 2, quantile, 0.975),
#   truth = c(c(alphas), c(betas), rho, sigma),
#   in_int = ifelse(lwr <= truth & upr >= truth, "yes", "no")
# )
# load samples
fit <- readRDS("rds files/spom/spom_default.rds")
fit <- list(samples = list(chain1 = fit[[1]][[1]], chain2 = fit[[2]][[1]], chain3 = fit[[3]][[1]]))
# traceplots
par(mfrow = c(3, 2))
for(i in 1:ncol(fit$samples[[1]])){
plot(
1, type = "n",
ylim = range(sapply(fit$samples, function(x) range(x[,i]))),
xlim = c(1, nrow(fit$samples[[1]])),
ylab = "estimate",
xlab = "iteration",
main = colnames(fit$samples[[1]])[i]
)
for(chain in 1:length(fit$samples)){
lines(fit$samples[[chain]][,i], col = chain)
}
}
data <- readRDS("rds files/spom/spom_data.rds")
fit_spom <- function(seed, parallel = F, constants, data, inits, niter = 5000, nchains = 3, thin = 1){
# for parallel
suppressMessages(library(nimble))
dexpcov <- nimbleFunction(
run = function(dists = double(2), rho = double(0), sigma = double(0)) {
returnType(double(2))
n <- dim(dists)[1]
result <- matrix(nrow = n, ncol = n, init = FALSE)
sigma2 <- sigma*sigma
rho2 <- rho * rho
for(i in 1:n)
for(j in 1:n)
result[i, j] <- sigma2 * exp((-1/2) * (1/rho2) * dists[i,j] * dists[i,j])
return(result)
}
)
assign("dexpcov", dexpcov, envir = .GlobalEnv)
# inits
init_function <- function(data){
list(
z = apply(data$Y, 1, function(x) ifelse(sum(x) == 0, 0, 1)),
alpha = rnorm(2),
# beta = rnorm(1),
rho = 2,
sigma = 1.5,
mu0 = 0
)
}
# code
code <- nimbleCode({
# regression coefficients
# for(i in 1:(pocc-1)){
#   beta[i] ~ dnorm(0, sd = 2)
# }
for(i in 1:pdet){
alpha[i] ~ dnorm(0, sd = 2)
}
# spatial parameters
mu0 ~ dnorm(0, sd = 2)
rho ~ dunif(.1, rho_upr)
sigma ~ T(dnorm(0, sd = 2), 0, Inf)
# spatial mean
covmat[1:nsites, 1:nsites] <- dexpcov(
dists = dist[1:nsites, 1:nsites],
rho = rho,
sigma = sigma
)
mu[1:nsites] <- mu0 * ones[1:nsites]
eta[1:nsites] ~ dmnorm(mu[1:nsites], cov = covmat[1:nsites, 1:nsites])
# likelihood
for(site in 1:nsites){
# logit(psi[site]) <- beta[1] * x[site] + eta[site]
logit(psi[site]) <- eta[site]
z[site] ~ dbern(psi[site])
for(visit in 1:nvisits){
logit(p[site, visit]) <- alpha[1] + alpha[2] * W[site, visit, 2]
Y[site, visit] ~ dbern(z[site] * p[site, visit])
}
}
})
# R model
if(parallel){
inits <- init_function(data)
}
model <- nimbleModel(code, constants, data, inits)
# C model
model_c <- compileNimble(model)
# R mcmc
# monitors <- c("beta", "alpha", "sigma", "rho", "mu0")
monitors <- c("alpha", "sigma", "rho", "mu0")
model_conf <- configureMCMC(model, monitors = monitors)
# customize MCMC
# model_conf$removeSampler(c("rho", "sigma"))
# model_conf$addSampler(
#   target = c("rho", "sigma"),
#   type = "RW_block",
#   control = list(
#     scale = .05
#   )
# )
##use AFSS? https://r-nimble.org/better-block-sampling-in-mcmc-with-the-automated-factor-slice-sampler
model_conf$removeSamplers(c("rho", "sigma"))
# model_conf$addSampler(
#   target = c("rho", "sigma"),
#   type = "AF_slice",
#   control = list(
#     sliceAdaptFactorInterval = 200,
#     sliceWidths = c(2, 2)
#   )
# )
model_conf$removeSamplers(c("eta[1:96]"))
model_conf$addSampler(
target = "eta[1:196]",
type = "RW_block",
control = list(
scale = .10
)
)
model_conf$addSampler(
target = c("rho", "sigma"),
type = "AF_slice",
)
mcmc <- buildMCMC(model_conf)
# C mcmc
mcmc_c <- compileNimble(mcmc)
# run
if(!parallel){
tmp <- runMCMC(mcmc_c, niter = niter, nchains = nchains, thin = thin)
} else{
tmp <- runMCMC(mcmc_c, niter = niter, nchains = nchains, thin = thin, setSeed = seed)
}
# return
out <- list(samples = tmp)
return(out)
}
# init_function <- function(data){
#   list(
#     z = apply(data$Y, 1, function(x) ifelse(sum(x) == 0, 0, 1)),
#     alpha = rnorm(2),
#     beta = rnorm(1),
#     rho = runif(1, .1, 3),
#     sigma = abs(rnorm(1, 0, sd = 2)),
#     mu0 = 0
#   )
# }
detach("package:nimble", unload = TRUE)
# fit <- fit_spom(
#   constants = list(
#     pocc = data$pocc,
#     pdet = data$pdet,
#     nsites = data$nsites,
#     nvisits = data$nvisits,
#     rho_upr = max(dist)/2
#   ),
#   data = list(
#     Y = data$Y,
#     x = data$X[,2],
#     W = data$W,
#     dist = data$dist,
#     ones = rep(1, nrow(data$X))
#   ),
#   inits = init_function(data),
#   niter = 25000,
#   thin = 10,
#   nchains = 3
# )
# saveRDS(fit, "rds files/spom/spom_fit_slice.rds")
# parallel
start <- Sys.time()
this_cluster <- makeCluster(3)
chain_output <- parLapply(
cl = this_cluster,
X = 1:3,
fun = fit_spom,
constants = list(
pocc = data$pocc,
pdet = data$pdet,
nsites = data$nsites,
nvisits = data$nvisits,
rho_upr = max(dist)/2
),
data = list(
Y = data$Y,
x = data$X[,2],
W = data$W,
dist = data$dist,
ones = rep(1, nrow(data$X))
),
niter = 50000,
thin = 10,
nchains = 1,
parallel = TRUE
)
stopCluster(this_cluster)
end <- Sys.time()
end - start
saveRDS(chain_output, file = "rds files/spom/spom_blockandslice.rds")
# load samples
fit <- readRDS("rds files/spom/spom_blockandslice.rds")
fit <- list(samples = list(chain1 = fit[[1]][[1]], chain2 = fit[[2]][[1]], chain3 = fit[[3]][[1]]))
# traceplots
par(mfrow = c(3, 2))
for(i in 1:ncol(fit$samples[[1]])){
plot(
1, type = "n",
ylim = range(sapply(fit$samples, function(x) range(x[,i]))),
xlim = c(1, nrow(fit$samples[[1]])),
ylab = "estimate",
xlab = "iteration",
main = colnames(fit$samples[[1]])[i]
)
for(chain in 1:length(fit$samples)){
lines(fit$samples[[chain]][,i], col = chain)
}
}
# fit$samples <- fit$samples[5001:10000,]
# plot_tbl <- tibble(
#   parameter = factor(colnames(fit$samples), levels = colnames(fit$samples)),
#   mean = colMeans(fit$samples),
#   lwr = apply(fit$samples, 2, quantile, 0.025),
#   upr = apply(fit$samples, 2, quantile, 0.975),
#   truth = c(c(alphas), c(betas), rho, sigma),
#   in_int = ifelse(lwr <= truth & upr >= truth, "yes", "no")
# )
